apiVersion: "tekton.dev/v1"
kind: "PipelineRun"
metadata:
  annotations:
    build.appstudio.redhat.com/target_branch: "{{target_branch}}"
    build.appstudio.redhat.com/commit_sha: "{{revision}}"
    pipelinesascode.tekton.dev/on-cel-expression: "event == 'push' && target_branch\
      \ == 'main'"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    build.appstudio.openshift.io/repo: "https://github.com/redhat-buildpacks/ubi-base-stack?rev={{revision}}"
  labels:
    appstudio.openshift.io/application: "buildpack-remote"
    pipelines.appstudio.openshift.io/type: "build"
    pipelines.openshift.io/strategy: "remote-build"
    appstudio.openshift.io/component: "ubi-base-stack"
    pipelines.openshift.io/used-by: "build-cloud"
    pipelines.openshift.io/runtime: "java"
  name: "ubi-base-stack"
  namespace: "cmoullia-tenant"
spec:
  params:
  - name: "git-url"
    value: "{{source_url}}"
  - name: "revision"
    value: "{{revision}}"
  - name: "image-expires-after"
    value: "5d"
  - name: "build-image-index"
    value: ""
  - name: "build-source-image"
    value: "false"
  - name: "prefetch-input"
    value: ""
  - name: "output-image"
    value: "quay.io/redhat-user-workloads/cmoullia-tenant/buildpack-remote/ubi-base-stack:{{revision}}"
  pipelineSpec:
    finally:
    - name: "show-sbom"
      params:
      - name: "IMAGE_URL"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-show-sbom:0.1"
        - name: "name"
          value: "show-sbom"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "summary"
      params:
      - name: "pipelinerun-name"
        value: "$(context.pipelineRun.name)"
      - name: "git-url"
        value: "$(tasks.git-clone.results.url)?rev=$(tasks.git-clone.results.commit)"
      - name: "image-url"
        value: "$(params.output-image)"
      - name: "build-task-status"
        value: "$(tasks.build-container.status)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-summary:0.2"
        - name: "name"
          value: "summary"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    results:
    - name: "IMAGE_URL"
      value: "$(tasks.build-container.results.IMAGE_URL)"
    - name: "IMAGE_DIGEST"
      value: "$(tasks.build-container.results.IMAGE_DIGEST)"
    - name: "BASE_IMAGES_DIGESTS"
      value: "$(tasks.build-container.results.BASE_IMAGES_DIGESTS)"
    - name: "CHAINS-GIT_URL"
      value: "$(tasks.git-clone.results.url)"
    - name: "CHAINS-GIT_COMMIT"
      value: "$(tasks.git-clone.results.commit)"
    tasks:
    - name: "init"
      params:
      - name: "image-url"
        value: "$(params.output-image)"
      - name: "rebuild"
        value: "$(params.rebuild)"
      - name: "skip-checks"
        value: "$(params.skip-checks)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-init:0.2"
        - name: "name"
          value: "init"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "git-clone"
      params:
      - name: "url"
        value: "$(params.git-url)"
      runAfter:
      - "init"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-git-clone:0.1"
        - name: "name"
          value: "git-clone"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "output"
        workspace: "workspace"
      - name: "basic-auth"
        workspace: "git-auth"
    - name: "prefetch-dependencies"
      params:
      - name: "input"
        value: "$(params.prefetch-input)"
      runAfter:
      - "git-clone"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies:0.1"
        - name: "name"
          value: "prefetch-dependencies"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "source"
        workspace: "workspace"
      - name: "git-basic-auth"
        workspace: "git-auth"
    - name: "build-container"
      params:
      - name: "PLATFORM"
        value: "linux-mlarge/amd64"
      - name: "BUILDER_IMAGE"
        value: "quay.io/konflux-ci/buildah-task:latest@sha256:860a239c5f25376a435a514ae6d53a5c75b1fa492461d17774e9b7cb32d1e275"
      - name: "PACK_CLI_VERSION"
        value: "v0.35.1"
      - name: "GO_VERSION"
        value: "1.23.0"
      - name: "BUILD_ARGS"
        value:
        - "-v"
      runAfter:
      - "prefetch-dependencies"
      taskSpec:
        results:
        - description: "Image repository and tag where the built image was pushed"
          name: "IMAGE_URL"
        - description: "Digest of the image just built"
          name: "IMAGE_DIGEST"
        - description: "Image reference of the built image"
          name: "IMAGE_REF"
        - description: "Digests of the base images used for build"
          name: "BASE_IMAGES_DIGESTS"
        - description: "SBOM Image URL"
          name: "SBOM_BLOB_URL"
        stepTemplate:
          env:
          - name: "BUILDER_IMAGE"
            value: "$(params.BUILDER_IMAGE)"
          - name: "PLATFORM"
            value: "$(params.PLATFORM)"
          - name: "IMAGE"
            value: "$(params.output-image)"
          - name: "PACK_CLI_VERSION"
            value: "$(params.PACK_CLI_VERSION)"
          - name: "GO_VERSION"
            value: "$(params.GO_VERSION)"
        steps:
        - args:
          - "$(params.BUILD_ARGS[*])"
          image: "quay.io/konflux-ci/buildah-task:latest@sha256:860a239c5f25376a435a514ae6d53a5c75b1fa492461d17774e9b7cb32d1e275"
          name: "run-script"
          script: |-
            #!/usr/bin/env bash
            set -eu
            set -o pipefail

            echo "##########################################################################################"
            echo "### Step 1 :: Configure SSH and rsync folders from tekton to the VM"
            echo "##########################################################################################"
            mkdir -p ~/.ssh
            if [ -e "/ssh/error" ]; then
              #no server could be provisioned
              cat /ssh/error
            exit 1
            elif [ -e "/ssh/otp" ]; then
              curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
              echo "" >> ~/.ssh/id_rsa
            else
              cp /ssh/id_rsa ~/.ssh
            fi
            chmod 0400 ~/.ssh/id_rsa

            export SSH_HOST=$(cat /ssh/host)
            export BUILD_DIR=$(cat /ssh/user-dir)
            export SSH_ARGS="-o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10"

            # Export the args to be passed to the script
            export BUILD_ARGS="$@"

            ssh $SSH_ARGS "$SSH_HOST" mkdir -p "$BUILD_DIR/workspaces" "$BUILD_DIR/scripts" "$BUILD_DIR/volumes"

            echo "### rsync folders from pod to VM ..."
            rsync -ra /var/workdir/ "$SSH_HOST:$BUILD_DIR/volumes/workdir/"
            rsync -ra "/tekton/results/" "$SSH_HOST:$BUILD_DIR/results/"

            echo "##########################################################################################"
            echo "### Step 2 :: Create the bash script to be executed within the VM"
            echo "##########################################################################################"
            mkdir -p scripts
            cat >scripts/script-build.sh <<'REMOTESSHEOF'
            #!/bin/sh

            TEMP_DIR="$HOME/tmp"
            USER_BIN_DIR="$HOME/bin"
            BUILDPACK_PROJECTS="$HOME/buildpack-repo"

            mkdir -p ${TEMP_DIR}
            mkdir -p ${USER_BIN_DIR}
            mkdir -p ${BUILDPACK_PROJECTS}

            export PATH=$PATH:${USER_BIN_DIR}

            echo "### Podman info ###"
            podman version

            echo "### Start podman.socket ##"
            systemctl --user start podman.socket
            systemctl status podman.socket

            echo "### Installing jq ..."
            curl -sSL https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64 > ${USER_BIN_DIR}/jq
            chmod +x ${USER_BIN_DIR}/jq

            echo "### Install tomlq tool ..."
            curl -sSL https://github.com/cryptaliagy/tomlq/releases/download/0.1.6/tomlq.amd64.tgz | tar -vxz tq
            mv tq ${USER_BIN_DIR}/tq

            echo "### Install syft"
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s --
            # Not needed as syft is already saved under bin/syft => mv bin/syft ${USER_BIN_DIR}/syft
            syft --version

            echo "### Install cosign"
            curl -O -sL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
            mv cosign-linux-amd64 ${USER_BIN_DIR}/cosign
            chmod +x ${USER_BIN_DIR}/cosign
            cosign version

            echo "### Install go ###"
            curl -sSL "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz" | tar -C ${TEMP_DIR} -xz go
            mkdir -p ${USER_BIN_DIR}/go
            mv ${TEMP_DIR}/go ${USER_BIN_DIR}
            chmod +x ${USER_BIN_DIR}/go

            mkdir -p $HOME/workspace
            export GOPATH=$HOME/workspace
            export GOROOT=${USER_BIN_DIR}/go
            export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
            go version

            echo "### Install pack ###"
            curl -sSL "https://github.com/buildpacks/pack/releases/download/${PACK_CLI_VERSION}/pack-${PACK_CLI_VERSION}-linux.tgz" | tar -C ${TEMP_DIR} --no-same-owner -xzv pack
            mv ${TEMP_DIR}/pack ${USER_BIN_DIR}

            echo "### Pack version ###"
            pack --version
            pack config experimental true

            echo "### Build the builder image using pack"
            curl -sSL https://github.com/paketo-community/builder-ubi-base/tarball/main | tar -xz -C ${TEMP_DIR}
            mv ${TEMP_DIR}/paketo-community-builder-ubi-base-* ${BUILDPACK_PROJECTS}/builder-ubi-base
            cd ${BUILDPACK_PROJECTS}/builder-ubi-base

            for build_arg in "${BUILD_ARGS[@]}"; do
              PACK_ARGS+=" $build_arg"
            done

            echo "### Pack extra args: $PACK_ARGS"

            echo "### Execute: pack builder create ..."
            export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock
            echo "pack builder create ${IMAGE} --config builder.toml ${PACK_ARGS}"
            pack builder create ${IMAGE} --config builder.toml ${PACK_ARGS}

            echo "### Export the image as OCI"
            podman push "$IMAGE" "oci:konflux-final-image:$IMAGE"

            echo "###########################################################"
            echo "### Export: IMAGE_URL, IMAGE_DIGEST & BASE_IMAGES_DIGESTS under: $BUILD_DIR/volumes/workdir/"
            echo "###########################################################"
            echo -n "$IMAGE" > $BUILD_DIR/volumes/workdir/IMAGE_URL

            BASE_IMAGE=$(tq -f builder.toml -o json 'stack' | jq -r '."build-image"')
            podman inspect ${BASE_IMAGE} | jq -r '.[].Digest' > $BUILD_DIR/volumes/workdir/BASE_IMAGES_DIGESTS

            echo "### Push the image produced and get its digest: $IMAGE"
            podman push \
               --digestfile $BUILD_DIR/volumes/workdir/IMAGE_DIGEST \
               "$IMAGE"

            echo "########################################"
            echo "### Running syft on the image filesystem"
            echo "########################################"
            syft -v scan oci-dir:konflux-final-image -o cyclonedx-json > $BUILD_DIR/volumes/workdir/sbom-image.json

            echo "### Show the content of the sbom file"
            cat $BUILD_DIR/volumes/workdir/sbom-image.json # | jq -r '.'

            {
              echo -n "${IMAGE}@"
              cat "$BUILD_DIR/volumes/workdir/IMAGE_DIGEST"
            } > $BUILD_DIR/volumes/workdir/IMAGE_REF
            echo "Image reference: $(cat $BUILD_DIR/volumes/workdir/IMAGE_REF)"

            echo "########################################"
            echo "### Add the SBOM to the image"
            echo "########################################"
            cosign attach sbom --sbom $BUILD_DIR/volumes/workdir/sbom-image.json --type cyclonedx $(cat $BUILD_DIR/volumes/workdir/IMAGE_REF)

            REMOTESSHEOF
            chmod +x scripts/script-build.sh

            echo "##########################################################################################"
            echo "### Step 3 :: Execute the bash script on the VM"
            echo "##########################################################################################"
            rsync -ra scripts "$SSH_HOST:$BUILD_DIR"
            rsync -ra "$HOME/.docker/" "$SSH_HOST:$BUILD_DIR/.docker/"

            ssh $SSH_ARGS "$SSH_HOST" \
              "BUILDER_IMAGE=$BUILDER_IMAGE PLATFORM=$PLATFORM IMAGE=$IMAGE PACK_CLI_VERSION=$PACK_CLI_VERSION GO_VERSION=$GO_VERSION BUILD_ARGS=$BUILD_ARGS" BUILD_DIR=$BUILD_DIR \
               scripts/script-build.sh

            echo "### rsync folders from VM to pod"
            rsync -ra "$SSH_HOST:$BUILD_DIR/volumes/workdir/" "/var/workdir/"
            rsync -ra "$SSH_HOST:$BUILD_DIR/results/"         "/tekton/results/"

            echo "##########################################################################################"
            echo "### Step 4 :: Export results to Tekton"
            echo "##########################################################################################"

            echo "### Export the tekton results"
            echo "### IMAGE_URL: $(cat /var/workdir/IMAGE_URL)"
            cat /var/workdir/IMAGE_URL > "$(results.IMAGE_URL.path)"

            echo "### IMAGE_DIGEST: $(cat /var/workdir/IMAGE_DIGEST)"
            cat /var/workdir/IMAGE_DIGEST > "$(results.IMAGE_DIGEST.path)"

            echo "### IMAGE_REF: $(cat /var/workdir/IMAGE_REF)"
            cat /var/workdir/IMAGE_REF > "$(results.IMAGE_REF.path)"

            echo "### BASE_IMAGES_DIGESTS: $(cat /var/workdir/BASE_IMAGES_DIGESTS)"
            cat /var/workdir/BASE_IMAGES_DIGESTS > "$(results.BASE_IMAGES_DIGESTS.path)"

            SBOM_REPO="${IMAGE%:*}"
            SBOM_DIGEST="$(sha256sum /var/workdir/sbom-image.json | cut -d' ' -f1)"
            echo "### SBOM_BLOB_URL: ${SBOM_REPO}@sha256:${SBOM_DIGEST}"
            echo -n "${SBOM_REPO}@sha256:${SBOM_DIGEST}" | tee "$(results.SBOM_BLOB_URL.path)"
          volumeMounts:
          - mountPath: "/ssh"
            name: "ssh"
            readOnly: true
          - mountPath: "/var/workdir"
            name: "workdir"
            readOnly: false
        volumes:
        - name: "ssh"
          secret:
            secretName: "multi-platform-ssh-$(context.taskRun.name)"
        - emptyDir: {}
          name: "workdir"
      workspaces:
      - name: "source"
        workspace: "workspace"
    - name: "build-image-index"
      params:
      - name: "IMAGE"
        value: "$(params.output-image)"
      - name: "COMMIT_SHA"
        value: "$(tasks.git-clone.results.commit)"
      - name: "IMAGE_EXPIRES_AFTER"
        value: "$(params.image-expires-after)"
      - name: "ALWAYS_BUILD_INDEX"
        value: "$(params.build-image-index)"
      - name: "IMAGES"
        value:
        - "$(tasks.build-container.results.IMAGE_URL)@$(tasks.build-container.results.IMAGE_DIGEST)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-build-image-index:0.1"
        - name: "name"
          value: "build-image-index"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "source-build"
      params:
      - name: "BINARY_IMAGE"
        value: "$(params.output-image)"
      - name: "BASE_IMAGES"
        value: "$(tasks.build-container.results.BASE_IMAGES_DIGESTS)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-source-build:0.1"
        - name: "name"
          value: "source-build"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    - name: "clair-scan"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-clair-scan:0.1"
        - name: "name"
          value: "clair-scan"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "ecosystem-cert-preflight-checks"
      params:
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-ecosystem-cert-preflight-checks:0.1"
        - name: "name"
          value: "ecosystem-cert-preflight-checks"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "sast-snyk-check"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "git-clone"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-sast-snyk-check:0.2"
        - name: "name"
          value: "sast-snyk-check"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    - name: "clamav-scan"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-clamav-scan:0.1"
        - name: "name"
          value: "clamav-scan"
        - name: "kind"
          value: "task"
        resolver: "bundles"
  timeouts:
    pipeline: "900000000000ns"
  workspaces:
  - name: "workspace"
    volumeClaimTemplate:
      apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      spec:
        accessModes:
        - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
  - name: "git-auth"
    secret:
      secretName: "{{ git_auth_secret }}"
